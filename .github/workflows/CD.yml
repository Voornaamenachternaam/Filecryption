name: Continuous Deployment

permissions:
  contents: write

on:
  release:
    types: [published]

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # keep your strict warnings policy; we'll append the x86-64-v3 flag when needed
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  CARGO_PROFILE_RELEASE_LTO: true
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
  CARGO_PROFILE_RELEASE_OPT_LEVEL: 3
  CARGO_PROFILE_RELEASE_PANIC: abort
  CARGO_PROFILE_RELEASE_STRIP: true

defaults:
  run:
    shell: bash

jobs:
  upload-assets:
    name: Upload Rust Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            use_cross: true
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            use_cross: false
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            use_cross: false
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            use_cross: true
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            use_cross: false

    timeout-minutes: 60

    steps:
      - name: Log build target
        run: |
           echo "Building for target: ${{ matrix.target }}"
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # --- NEW: enable x86-64-v3 CPU level for x86_64 targets ---
      - name: Enable x86-64-v3 CPU level for x86_64 targets
        if: contains(matrix.target, 'x86_64')
        run: |
          # append the x86-64-v3 tuning to RUSTFLAGS while preserving any existing flags
          echo "RUSTFLAGS=${RUSTFLAGS} -C target-cpu=x86-64-v3" >> "${GITHUB_ENV}"
      - name: Cache Rust dependencies
        uses: actions/cache@v4.3.0
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
      - name: Install cross for cross-compilation
        if: matrix.use_cross == true
        uses: taiki-e/install-action@v2.62.42
        with:
          tool: cross

      - name: Enable static linking for Windows targets
        if: endsWith(matrix.target, 'windows-msvc')
        run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"

      - name: Build binary
        run: |
          if [ "${{ matrix.use_cross }}" == "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Strip binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: strip "target/${{ matrix.target }}/release/filecryption" || echo "Skipping strip (not supported)"

      - name: Strip binary (Windows)
        if: runner.os == 'Windows'
        run: |
          llvm-strip.exe "target/${{ matrix.target }}/release/filecryption.exe" || echo "Skipping strip (not supported)"

      # --- NEW: Install UPX v5.0.2 on Linux runners (amd64 host binary) ---
      - name: Install UPX v5.0.2 (Linux)
        if: runner.os != 'Windows'
        run: |
          echo "Installing UPX v5.0.2 (amd64 build)"
          curl -fsSL -o upx.tar.xz "https://github.com/upx/upx/releases/download/v5.0.2/upx-5.0.2-amd64_linux.tar.xz"
          tar -xJf upx.tar.xz
          # the tarball contains an 'upx' binary in a small directory; move it into $HOME/.local/bin
          mkdir -p "$HOME/.local/bin"
          # find the extracted upx binary and install
          UPX_BIN=$(find . -maxdepth 2 -type f -name upx -print -quit)
          chmod +x "$UPX_BIN"
          mv "$UPX_BIN" "$HOME/.local/bin/upx"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      # --- NEW: Install UPX v5.0.2 on Windows runners (win64) ---
      - name: Install UPX v5.0.2 (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Installing UPX v5.0.2 (win64)"
          $url = "https://github.com/upx/upx/releases/download/v5.0.2/upx-5.0.2-win64.zip"
          $zip = "upx.zip"
          Invoke-WebRequest -Uri $url -OutFile $zip -UseBasicParsing
          Expand-Archive -Path $zip -DestinationPath upx
          # Add the extracted folder to PATH for the remainder of the job
          $upxdir = (Resolve-Path .\upx).Path
          Add-Content -Path $Env:GITHUB_PATH -Value $upxdir

      # --- NEW: Compress binary with UPX (Linux/macOS) ---
      - name: Compress binary with UPX (Linux)
        if: runner.os != 'Windows'
        run: |
          echo "Running upx --ultra-brute --no-lzma on Linux binary (best compression)"
          # allow UPX to fail without failing the job (some binaries/instrumentation can make UPX refuse to pack)
          upx --ultra-brute --no-lzma "target/${{ matrix.target }}/release/filecryption" || echo "UPX compression failed or is unsupported for this binary; continuing."

      # --- NEW: Compress binary with UPX (Windows) ---
      - name: Compress binary with UPX (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Running upx --ultra-brute --no-lzma on Windows binary (best compression)"
          try {
            & upx.exe --best --lzma "target/${{ matrix.target }}/release/filecryption.exe"
          } catch {
            Write-Host "UPX compression failed or is unsupported for this binary; continuing."
          }

      - name: Upload Rust binary to release
        uses: taiki-e/upload-rust-binary-action@v1.27.0
        with:
          bin: filecryption
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          token: ${{ secrets .GITHUB_TOKEN }}
